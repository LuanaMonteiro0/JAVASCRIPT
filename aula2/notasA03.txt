arrays ou listas/vetores (é tudo igual pra javascript)

-> armazena varios valores dentro de uma unica variavel 

é util quando se tem uma quantidade desconhecida de valores ou quando há uma quantidade muito grande de
valores que precisa ser ordenada ou percorrida

como declarar:
var vetor = Array();
vetor[0] = "ifsp";
vetor[1] = 2013;
ou
var vetor = Array("ifsp","java", true, 2020, zrray(), 1.5487);
ou
var vetor = ["ifsp","java", true, 2020, zrray(),-1.5487];

os arrays de javascript são bichos mutaveis, podem crescer, mudar e se transformar

typeof(nomeDaVariavel)  -> fornece o tipo da variavel/array

const para array -> trava o js pra entender que aquela variavel sera sempre um Array
ainda sim o array pode ser alterado, aumentado ou transformado


maneiras de percorrer:

for classico com o vetor.length
for(let i = 0; i < vetor.length; i++)

boa pratica -> use let para declarar o i ou qualquer outra variavel do for para que o i não exista fora do for

forin -> retorna o indice do vetor
var vetor = ['a', 'b', 'c'];
for(valor in vetor){
    console.log(valor); //0, 1, 2
}

forof -> retorna o conteudo do vetor
var vetor = ['a', 'b', 'c'];
for(valor of vetor){
    console.log(valor); //a, b, c
}

manipulação de vetores:

implementação de fila no javascript:
operações:
entrar na fila (adicionar no fim da fila)
sair da fila (sai do começo da fila)
ir para o começo da fila (adicionar no comeco da fila)
sair da fila (sai do fim da fila)

adicionar no fim da fila
var vetor = ['a', 'b', 'c'];
vetor.push("d"); ->adiciona o elemento "d" no fim da lista, retorna o tamanho da lista (podemos usar ou não)
var vetor = ['a', 'b', 'c', 'd'];

adicionar no comeco da fila
var vetor = ['a', 'b', 'c'];
vetor.unshift("d"); ->adiciona o elemento "d" no começo da lista, retorna o tamanho da lista (podemos usar ou não)
var vetor = ['d', 'a', 'b', 'c'];

arranca do fim da fila
var vetor = ['a', 'b', 'c'];
vetor.pop(); ->remove o elemento "c" do fim da lista, retorna o conteudo removido (podemos usar ou não)
var vetor = ['a', 'b'];

arranca do começo da fila
var vetor = ['a', 'b', 'c'];
vetor.shift(); ->remove o elemento "c" do começo da lista, retorna o conteudo removido (podemos usar ou não)
var vetor = ['b', 'c'];


o comando splice:

v = [a, b, c, d, e, f]
v.splice(2,3); 
     v = [a, b, f]     v.splice(2,3); retorna [c,d,e]

v.splice(elemento inicial,qtde a ser removida);

-> se retirar um elemento ou nenhum retorna uma lista com um elemento ou lista vazia
-> se qtd de memoria for maior que a qtd de elementos na lista ele retorna apenas os elementos existentes

v.splice(elemento inicial) -> a partir do elemento inicial vc pega o que tiver na lista

v = [a, b, c, d, e, f]
v.splice(2, 3, "ifsp");
     v = [a, b, 'ifsp', f]  v.splice retorna [c, d, f]
-> na posição inicial indicada o conteudo 'ifsp' sera inserido

v.splice(2, 3, "j", "k", "l", "m");
     v = [a, b, j, k, l, m, f]  v.splice retorna [c, d, f]


v = [a, b, c, d, e, f]
v.splice(2, 1, "ifsp");
     v = [a, b, "ifsp", d, e, f]  v.splice retorna [c]

v.splice(2, 0, "ifsp");
     v = [a, b, "ifsp", c, d, e, f]  v.splice retorna []
     -> adicionou no meio!


o comando slice:

var novoVetor = vetorAntigo.slice();
    -> copia o vetorAntigo "profundamente" ou um pedaço do vetor vetorAntigo

 
 var nome = "luana giovana monteiro";

função split:
divide a string em partes e gera um array com as strings separadas
nome.split(" ");
console.log(nome); -> ["luana", "giovana", "monteiro"];

função join:
gera um elemento string de qualquer vetor para colar as palavras com o elemento especificado
novoNome = nome.join("-");
console.log(novoNome); -> "luana-giovana-monteiro";

vetor.includes(elemento) -> true ou false se existe o elemento no vetor

vetor = [a, d, j, a]
vetor.indexOf(elemento) -> elemento = a  -> 0
vetor.lastIndexOf(elemento) -> elemento = a -> 3

vetor.reverse() -> reverte a ordem dos elementos do array

vetor.sort() -> ordena todo mundo !!!!!!!!!!!!alfabeticamente!!!!!!!!!!
     -> ai quero fazer ordenação numerica ou qualquer outra ordenação olha qual que é a função
        que deve ser usada com o sort pra fazer a ordenação


função map 
modifica os elementos de uma lista retornando uma nova lista de mesmo tamanho 
função soma(elemento){
    return elemento + 1
}
vetor = [1, 2, 3];
vetordois = vetor.map(soma);
console.log(vetordois); -> [2, 3, 4]

a função map espera que o primeiro elemento passado seja o elemento do array origem
o segundo elemento passado seja o indice do array
o terceiro elemento passado seja uma copia do array de entrada
no exemplo a copia deve ser do array chamado "vetor" 



função filter -> o mais usado de todos
remove os elementos atravez de um filtro
não altera os elementos, apenas exclui os elementos de acordo um uma função de filtragem

a função que filter espera é boleana

function filtra(elemento){
    return elemento > 1? true : false;
}
vetor = [-1, -2, 3, 5];
vetordois = vetor.filter(filtra);
console.log(vetordois); -> [3, 5]


a função filter espera que o primeiro elemento seja o elemento do array origem
o segundo elemento é o indice do array
o terceiro é o proprio array (como no map)

diferença primordial: o filter espera obrigatoriamente que a função tenha retorno boleano.



função reduce -> é o menos usado dos 3 pq é uma faca de cinco gumes
obtem um unico valor da lista calculado sobre a lista em sua totalidade

tem dois atributos obrigatorios e tres opcionais

function somatorio(acc, val){
    return acc + val;
}
valores = [1, 2, 3, 4, 5, 6];
resultado = valores.reduce(somatorio);
console.log(resultado); -> 21


não use filter, map ou reduce em qualquer vetor muito grande (+1000 elementos)
 ou com qualquer elemento undefined

