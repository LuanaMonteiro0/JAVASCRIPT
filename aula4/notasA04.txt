aula passada - seletores de elementos 

call back - gatilhos que acontecem 
-> são chamadas  "avisos" pros elementos 

em frameworks avançados permitem que se crie seus proprios eventos

existem muitos eventos 

evite todos os atributos com prefixo "on" pois eles referenciam as funções
quebrando os pilares da programação web

tres pilares: 
paginas separadas 
html tem uma 
css tem uma 
javascript tem uma 

cada arquivo cuida da sua propria vida assim permite a separação dos interesses das paginas

usar addEventListener
-> o segundo parametro do event listener é uma referencia para a função 
    e não a função em si (com parenteses () junto ) é só o nome dele 

o eventListener sempre tem prioridade por idade, havendo dois eventlistener o primeiro é executado e
ao final da função do primeiro o segundo é executado, sempre nessa ordem


removeEventListener
-> el.removeEventListener("refEvento", refFunção) -> apaga a determida função de determinado evento do elemento
    el.removeEventListener() -> remove todos os eventListeners

propagação de evento
ao clicar em um botão afeta os pais e avos até a tag html 
ou seja, um eventListener pode desencadear outros eventos se houverem

e.stopPropagation(); -> mata a propagação de eventos 

o onclick também propaga no html (não use o onclick)

recomendação: stopPropagation em todos os eventos 


parte 3 adicionando e desaparecendo com os elementos

.innerText -> retorna a string com o conteudo textual do elemento

.innerHTML -> retorna o codigo html que esta dentro da tag

para tag input
.value  -> pega o que o usuario digitou, preencheu, marcou etc

.getAttribute -> pega o valor do atributo passado como parametro
.setAttribute -> seta o valor do atributo que foi passado como parametro

atributo class
classList.add() -> adiciona nas classes
classList.remove() -> apaga das classes
classList.replace() -> substitui uma classe pela outra
classList.contains() -> verifica se esta nas classes


novo elemento dentro de um antigo
let div = document.querySelector("div")
let novo = document.createElement(Tag HTML)
novo.innerText = "paragrafo"

div.append(novo)  -> adiciona como ultimo filho na tag div


elemento.remove(); ->apaga o elemento, se tiver filhos mata eles também

para alterar o css usar a abordagem da troca e colocação de classes
